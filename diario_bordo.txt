python3.10 [comando] :: Versão do curso
python3 [comando] :: Versão nativa do linux

# Adicionando entrada no repositório
sudo add-apt-repository ppa:deadsnakes/ppa

Discord: https://discord.gg/67PyPrXhwz
Repositório do curso: https://github.com/luizomf/curso-django-projeto1

Ao abrir o VS Code, sempre garantir:
- A escolha do interpretador python do ambiente virtual
- Ativar o ambiente virtual (ver como automatizar isso)

https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls

Processo de desenvolvimento ####################################################################################################################################################################################
Uma vez criado o app em um projeto, deve ser providenciado o registro dele no arquivo settings.py alterando o parâmetro INSTALLED_APPS. O nome do app fica disponível no arquivo apps.py na pasta do app
É necessário criar um arquivo que indicará as urls do app (urls.py é o padrão utilizado). Para cada url, deve haver um método em views.py que responderá a requisição HTTP (request) com um objeto HttpResponse.
A url (rota) criada precisa ser registrada nas urls do projeto no arquivo urls.py do projeto
Os arquivos html devem estar numa pasta de 'templates' no namespace do app
:: Esta pasta deve ser declarada em settings.py
Os arquivos estáticos como arquivos javascript e css devem estar presentes em uma pasta do projeto e migrados para o app segundo os seguintes passos
:: 


Documentação Django ####################################################################################################################################################################################
- https://docs.djangoproject.com/pt-br/3.2/topics/http/urls/
- https://docs.djangoproject.com/en/4.0/ref/templates/language/#templates
- Filtros: https://docs.djangoproject.com/en/4.0/ref/templates/builtins/#ref-templates-builtins-filters
- Models: https://docs.djangoproject.com/en/4.0/topics/db/models/
          https://docs.djangoproject.com/en/4.0/ref/models/fields/
- Configuração da base de dados: https://docs.djangoproject.com/en/4.0/ref/settings/#databases
- QuerySet: https://docs.djangoproject.com/es/4.0/ref/models/querysets/
- Integração MongoDB: https://www.mongodb.com/compatibility/mongodb-and-django
- Relacionamento: https://docs.djangoproject.com/en/4.0/ref/models/relations/
- Lookup: https://docs.djangoproject.com/en/4.0/topics/db/queries/#field-lookups-intro
- URL dispatcher: https://docs.djangoproject.com/en/4.0/topics/http/urls/
- Templates: https://docs.djangoproject.com/en/4.0/topics/templates/
- Request e Response: https://docs.djangoproject.com/en/4.0/ref/request-response/
- Race conditions: https://docs.djangoproject.com/en/4.0/ref/models/expressions/#avoiding-race-conditions-using-f


Arquivos estáticos #####################################################################################################################################################################################
- O Django possui recursos para tratar arquivos estáticos (CSS, HTML) para agilizar a exibição através do cache
  - O Django envia informações para trabalhar de forma mais otimizada com tais arquivos (cache do navegador)
  - A configuração para uso dos recursos dos arquivos estáticos é feita no arquivo settings.py
    - STATIC_URL
    - Documentação: https://docs.djangoproject.com/en/4.0/howto/static-files/
- Deve ser criada uma pasta 'static' na pasta do app
  - Por padronização, deve haver um namespace para os arquivos da pasta e isto é feito com o mesmo nome do app
    - [nome_app]/static/[nome_app]/css
    - [nome_app]/static/[nome_app]/javascript
    - [nome_app]/static/[nome_app]/images
- Pode haver arquivos estáticos comuns a todos os apps e isto também pode ser configurado (ver documentação)
  - O arquivo settings.py deve ter a entrada STATICFILES_DIRS como indicado na documentação

Recursos úteis que podem ser usados ####################################################################################################################################################################
- Arquivos css de interesse
  https://cdnjs.com/libraries/font-awesome
- Ícones
  https://fontawesome.com/
- Imagens
  https://placeholder.com/
  https://www.pexels.com/search/finances/
- css
  https://www.makeuseof.com/tag/css-template-sites-dont-start-scratch/
  https://nicepage.com/pt/modelos-css
  https://www.free-css.com/
- Dev.to
  https://dev.to/
- mdn. Pesquisar no google "mdn [algum elemento html]"
  https://developer.mozilla.org/pt-BR/
- Tags html
  https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element
- Editores visuais html
  https://webdesigner.withgoogle.com/
  https://quilljs.com/
  http://openelement.uk/
  https://www.tiny.cloud/
  https://www.coffeecup.com/html-editor/
  https://pt.wix.com/
  - Fonte: https://www.guru99.com/best-wysiwyg-html-editor.html

  # Configura pasta onde serão salvos arquivos de media
  MEDIA_URL = '/media/'
  MEDIA_ROOT = BASE_DIR / 'media'


Compreendendo a estrutura do Django ####################################################################################################################################################################
- Os templates são as páginas HTML que são renderizadas conforme lógica de negócio
  - Um template pode ser usado dentro de outro, seja pela tag Django 'include', seja pela tag de herança 'extends' em conjunto com 'block'
- views.py
  - Contém métodos cujo retorno, regra geral, é uma página HTML renderizada
  - As páginas html são referenciadas em templates que ficam em uma pasta com este nome (template) a bem da padronização
- urls.py
  - Contém referências às views
- models.py
  - Definição das tabelas do banco de dados no formato de classes Python. O objetivo é definir o modelo de dados em um ponto e derivar coisas a partir da definição
  - Os campos do modelo são instâncias da classe Field
  - O Django é capaz de tratar imagens e salvá-las em um arquivo e não no banco de dados
    - Deve-se configurar o settings.py para estabelecer a pasta (árvore de diretórios) em que o arquivo será salvo (MEDIA_URL e MEDIA_ROOT)
- admin.py
  - Definição das entidades (models.py) que serão visíveis ao administrador
- Função path() possui quatro argumentos
  - route                           :: Contém uma url. Data a url fornecida no browser, Django irá procurar por um padrão que case com o fornecido
  - view                            :: Chava a função/método na view indicada uma vez que houver a correspondência entre a url do browser e a url do path()
  - kwargs                          :: Argumentos passados como dicionários para a função da view
  - name                            :: Nomeia a url de modo a ser acessada pelos tamplates
- Arquivo settings.py
  - INSTALLED_APPS                  :: Mostra os aplicativos (apps) ativos para a instância Django. Os apps podem ser usados em outros projetos se forem devidamente empacotados e distribuídos
- Funcionamento geral
  - Ao chamar o endereço inicial, o Django procura por ele no arquivo urls.py
  - O arquivo views.py é chamado para renderizar uma página HTML
    - Provavelmente, neste ponto há o encapsulamento das regras de negócio e chamada ao banco de dados
  - Os arquivos estáticos, como css, javascript ou HTML's gerais são usados para carregamento rápido de artefatos que não exigem interação do usuário
  - (?) Na página, deve haver chamada para outras entradas no arquivo urls.py
  - No arquivo urls.py do projeto deve haver referência aos arquivos urls.py dos aplicativos
- Estrutura de arquivos:
  [pasta_projeto]
    [global]                                                                      :: Pasta com templates de uso geral. Deve ser referenciada no arquivo settings.py, TEMPLATES
    [nome_projeto]                                                                :: criado através do comando 'django-admin startproject [nome_projeto] .'
      > settings.py                                                               :: Arquivo de configurações do Django. Lá devem ser incluídas referências aos aplicativos (apps) que compõem o projeto
      > urls.py                                                                   :: As entradas contêm chamadas aos apps através do comando 'include'
    [apps]                                                                        :: Pasta contendo os apps do projeto
      [templates]                                                                 :: Por convenção, Django irá visualizar uma pasta templates para todos os apps instalados em INSTALLED_APPS.
                                                                                     Ou seja, deve haver uma pasta chamada templates (criada manualmente) como subdiretório da pasta do app
        [apps]                                                                    :: por padronização, é o mesmo nome do app
          > Páginas html que serão renderizadas no arquivo views.py               :: A estrutura de diretórios cria um namespace. Isto é uma boa prática para evitar problemas com templates com mesmo nome
      > urls.py
      > views.py                                                                  :: Conterá funções python que implementarão a lógica de negócio e renderizará (método 'render') a respostas
    [venv]                                                                        :: Pasta gerada ao se criar o ambiente virtual
- Arquivo urls.py:
  - Porta de entrada da aplicação
  - Para cada entrada 'path', deve haver uma função especificada em algum app
    - As funções nas entradas 'path' devem ter como argumento um HTTP_Request e como retorno um objeto HTTP_Response
  - https://docs.djangoproject.com/en/4.0/topics/http/urls/
- O arquivo manage.py carrega as configurações existentes no arquivo [nome_projeto]/settings.py
  - https://docs.djangoproject.com/en/4.0/ref/django-admin/
- A chamada python manage.py [opcao] é a principal no Django
- O arquivo __init__.py pode ser usado para carregar informações para o projeto como se fosse um 'import' inicial. Regra geral, é deixado vazio
- Os arquivos asgi.py e wsgi.py são usados no ambiente de produção para referenciar o servidor

Onde publicar as aplicações ############################################################################################################################################################################
- Importante: pesquisar como publicar o portfólio de aprendizado e de projetos profissionais realizados
- Heroku
- PythonAnywhere
- AWS
- Pesquisar opções na plataforma do Google

Configuração de ambiente ###############################################################################################################################################################################
- Configuração do VS Code
  Importar configuração do arquivo settings.json
  Instalar extensões Pylance e Django (batisteo)
  Atenção para a configuração python.defaultInterpreterPath: ela aponta para a pasta do ambiente virtual (venv por padronização)
  material icon theme :: Para que sejam visualizados ícones de pastas, arquivos no explorer do VS code

- Instalação de pacotes
  python3 -m pip install pip setuptools wheel --upgrade
  python3 -m pip install testresources --upgrade
  python3 -m pip install launchpadlib --upgrade

- Criação do ambiente virtual
  python3 -m venv venv                                :: O nome do ambiente virtual pode mudar, mas por padronização, adota-se venv
  source [pasta projeto]/venv/bin/activate            :: Ativa o ambiente virtual. O comando 'source' pode ser substituído por '.'
  source venv/bin/activate                            :: Ativação quando se está na pasta do projeto no shell
  deactivate                                          :: Desativação do ambiente virtual
  pip freeze                                          :: Exibe os pacotes instalados no ambiente virtual
  pip install django

- Configuração git
  Criar repositório no Git e marcar opção para conexão por ssh
  Execução de comandos de configuração:
    git config --global user.name "Marcus Seabra"
    git config --global user.email "seabra.marcus@gmail.com"
    git config --global init.defaultBranch main                                 :: Estabelece o nome do branch master para main
    git init
    ssh-keygen                                                                  :: Criação par de chaves ssh na pasta /home/marcus.seabra/.ssh. São criados um arquivo público (.pub) e outro privado
                                                                                   O arquivo público será usado para vincular o repositório no github na pasta local
                                                                                   No github, deve-se adicionar o conteúdo da chave ssh pública em settings -> SSH and GPG keys -> SSH keys
                                                                                   (do usuário, não do repositório)
    git remote add origin git@github.com:marcusseabra/curso-django.git          :: Foi necessário reiniciar o VS Studio quando os comandos foram realizados pelo terminal do editor
    git remote add origin git@github.com:marcusseabra/[nome_projeto].git        :: Foi necessário reiniciar o VS Studio quando os comandos foram realizados pelo terminal do editor
    .gitignore                                                                  :: Neste arquivo devem ser colocadas pastas que serão ignoradas pelo git. Avaliar a utilidade disso quando se deseja
                                                                                   baixar o código e o ambiente virtual criado já que, ao usar este recurso, os dados do ambiente virtual são ignorados.
                                                                                   Exemplos de gitignore mais completos: busca google gitignore example django
                                                                                   Gerador de gitignore: https://www.toptal.com/developers/gitignore
    git status                                                                  :: Mostra o que precisa ser feito
    git add .
    git commit -m "Mensagem"
- Testes
  pip install pytest pytest-django                                              :: Pacotes para testes
- Configuração Django
  django-admin startproject [nome_projeto] .                                    :: O '.' é necessário para evitar criação de muitas pastas com o nome do projeto
  python manage.py runserver                                                    :: Deve ser executado na pasta do projeto para iniciar o servidor
  python manage.py runserver <numero_porta>
  python manage.py startapp [nome_app]                                          :: Por convenção, deve estar na mesma pasta do manage.py
  python manage.py migrate                                                      :: Gera as tabelas necessárias ao ler as configurações INSTALLED_APPS e DATABASES (settings.py). É possível remover
                                                                                   tabelas que não sejam de interesse ao comentar ou excluir as linhas em INSTALLED_APPS
  python manage.py makemigrations                                               :: Promove a configuração das migrações (a partir do código python gerar as tabelas)
  python manage.py sqlmigrate [nome_app] [numero_migration]                     :: Gera o script sql da configuração da migração
  python manage.py migrate                                                      :: Com base nas configurações existentes, gera as tabelas no banco de dados com base nas classes nos arquivo models.py
                                                                                   A tabela django_migrations contém o histórico de migrações realizadas pelo Django
  python manage.py createsuperuser                                              :: Criação de usuário administrador (marcus.seabra amorius0107)
  python manage.py shell                                                        ::
  python manage.py check                                                        :: Avalia pendências ou erros no projeto
    from recipes.models import Recipe, Category                                 :: Para consultar os modelos, é preciso importá-los antes
    categories = Category.objects.all()                                         :: A variável categories armazena um objeto QuerySet resultante da pesquisa sobre os registros em Category
    categories.order_by("-name")                                                :: Retorna um conjunto ordenado de forma decrescente pelo atributo 'name'
    recipes = Recipe.objects.all()
    for recipe in recipes: print(recipe.id,  " - ",  recipe.title)
    receitas_marcus = Recipe.objects.filter(title__contains='Marcus')


Curso HTML & CSS #######################################################################################################################################################################################
- Instalar a extensão "Live Server", um servidor HTML
- Validação do documento HTML: https://validator.w3.org/
- Estilos <style>
  - Os estilos podem ser aplicados sobre atributos html, id's e classes
  - Os atributos class são referenciadas por .
  - Os atributos id são referenciados por #
- Tag para link: <a>
  - https://developers.google.com/search/docs/advanced/guidelines/qualify-outbound-links?hl=pt-br
- Tag para imagem: <img>
- Tags semânticas: <del>, <ins>, <strong>, <small>
  - https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/strong
- Tags de formatação: <sup>, <sub>, <q>, <b>, <s>, <code>, <pre>
- Contêineres
  - <span> :: contêiner genérico inline
  - <div> :: contêiner genérico em bloco
- Separação de conteúdo
  https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element#separa%C3%A7%C3%A3o_de_conte%C3%BAdo

########################################################################################################################################################################################################
